[{"C:\\tk-market-web\\src\\index.js":"1","C:\\tk-market-web\\src\\App.js":"2","C:\\tk-market-web\\src\\reportWebVitals.js":"3","C:\\tk-market-web\\src\\main\\index.js":"4","C:\\tk-market-web\\src\\product\\index.js":"5","C:\\tk-market-web\\src\\upload\\index.js":"6","C:\\tk-market-web\\src\\config\\constants.js":"7","C:\\tk-market-web\\src\\components\\productCard.js":"8"},{"size":380,"mtime":1641366758214,"results":"9","hashOfConfig":"10"},{"size":1214,"mtime":1640165211214,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1638634358143,"results":"12","hashOfConfig":"10"},{"size":1925,"mtime":1640164313461,"results":"13","hashOfConfig":"10"},{"size":2804,"mtime":1640164342816,"results":"14","hashOfConfig":"10"},{"size":3912,"mtime":1640164375534,"results":"15","hashOfConfig":"10"},{"size":146,"mtime":1641404530229,"results":"16","hashOfConfig":"10"},{"size":1321,"mtime":1641399849461,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hogeyz",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\tk-market-web\\src\\index.js",[],"C:\\tk-market-web\\src\\App.js",["39"],"import \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport MainPageComponent from \"./main\";\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\nimport UploadPage from \"./upload\";\nimport ProductPage from \"./product\";\nimport { Button } from \"antd\";\nimport { DownloadOutlined } from \"@ant-design/icons\";\nfunction App() {\n  const history = useHistory();\n  return (\n    <div>\n      <div id=\"header\">\n        <div id=\"header-area\">\n          <Link to=\"/\">\n            <img src=\"/images/icons/logo.png\" />\n          </Link>\n          <Button\n            size=\"large\"\n            onClick={function () {\n              history.push(\"/upload\");\n            }}\n            icon={<DownloadOutlined />}\n          >\n            상품 업로드\n          </Button>\n        </div>\n      </div>\n      <div id=\"body\">\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <MainPageComponent />\n          </Route>\n          <Route exact={true} path=\"/products/:id\">\n            <ProductPage />\n          </Route>\n          <Route exact={true} path=\"/upload\">\n            <UploadPage />\n          </Route>\n        </Switch>\n      </div>\n      <div id=\"footer\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\tk-market-web\\src\\reportWebVitals.js",[],"C:\\tk-market-web\\src\\main\\index.js",["40"],"import React from \"react\";\r\nimport \"./index.css\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\nimport { API_URL } from \"../config/constants.js\";\r\nimport { Carousel, Spin } from \"antd\";\r\nimport \"dayjs/locale/ko\";\r\nimport ProductCard from \"../components/productCard\";\r\n\r\ndayjs.extend(relativeTime);\r\ndayjs.locale(\"ko\");\r\n\r\nfunction MainPage() {\r\n  const [products, setProducts] = React.useState([]);\r\n  const [banners, setBanners] = React.useState([]);\r\n  React.useEffect(function () {\r\n    axios\r\n      .get(`${API_URL}/products`)\r\n      .then(function (result) {\r\n        const products = result.data.products;\r\n        setProducts(products);\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"에러 발생 : \", error);\r\n      });\r\n\r\n    axios\r\n      .get(`${API_URL}/banners`)\r\n      .then((result) => {\r\n        const banners = result.data.banners;\r\n        setBanners(banners);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"에러 발생 : \", error);\r\n      });\r\n  }, []);\r\n  if (products.length === 0) {\r\n    return (\r\n      <div style={{ textAlign: \"center\", paddingTop: 32 }}>\r\n        <Spin size=\"large\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Carousel autoplay autoplaySpeed={3000}>\r\n        {banners.map((banner, index) => {\r\n          return (\r\n            <Link to={banner.href}>\r\n              <div id=\"banner\">\r\n                <img src={`${API_URL}/${banner.imageUrl}`} />\r\n              </div>\r\n            </Link>\r\n          );\r\n        })}\r\n      </Carousel>\r\n      <h1 id=\"product-headline\">판매되는 상품들</h1>\r\n      <div id=\"product-list\">\r\n        {products.map(function (product, index) {\r\n          return <ProductCard product={product} key={index} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","C:\\tk-market-web\\src\\product\\index.js",["41","42","43"],"import { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./index.css\";\r\nimport { API_URL } from \"../config/constants\";\r\nimport dayjs from \"dayjs\";\r\nimport { Button, message, Spin } from \"antd\";\r\nimport ProductCard from \"../components/productCard\";\r\n\r\nfunction ProductPage() {\r\n  const { id } = useParams();\r\n  const [product, setProduct] = useState(null);\r\n  const [products, setProducts] = useState([]);\r\n  const getProduct = () => {\r\n    axios\r\n      .get(`${API_URL}/products/${id}`)\r\n      .then((result) => {\r\n        setProduct(result.data.product);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  const getRecommendations = () => {\r\n    axios\r\n      .get(`${API_URL}/products/${id}/recommendation`)\r\n      .then((result) => {\r\n        setProducts(result.data.products);\r\n        console.log(result.data.products);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getProduct();\r\n    getRecommendations();\r\n  }, [id]);\r\n\r\n  if (product === null) {\r\n    return (\r\n      <div style={{ textAlign: \"center\", paddingTop: 32 }}>\r\n        <Spin size=\"large\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const onClickPurchase = () => {\r\n    axios\r\n      .post(`${API_URL}/purchase/${id}`)\r\n      .then((result) => {\r\n        message.info(\"구매가 완료되었습니다\");\r\n        getProduct();\r\n      })\r\n      .catch((error) => {\r\n        message.error(`에러가 발생했습니다. ${error.message}`);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"image-box\">\r\n        <img src={`${API_URL}/${product.imageUrl}`} />\r\n      </div>\r\n      <div id=\"profile-box\">\r\n        <img src=\"/images/icons/avatar.png\" />\r\n        <span>{product.seller}</span>\r\n      </div>\r\n      <div id=\"contents-box\">\r\n        <div id=\"name\">{product.name}</div>\r\n        <div id=\"price\">{product.price}원</div>\r\n        <div id=\"createdAt\">\r\n          {dayjs(product.createdAt).format(\"YYYY년 MM월 DD일\")}\r\n        </div>\r\n        <Button\r\n          id=\"purchase-button\"\r\n          size=\"large\"\r\n          type=\"primary\"\r\n          danger\r\n          onClick={onClickPurchase}\r\n          disabled={product.soldout === 1}\r\n        >\r\n          재빨리 구매하기\r\n        </Button>\r\n        <div id=\"description-box\">\r\n          <pre id=\"description\">{product.description} </pre>\r\n        </div>\r\n        <div>\r\n          <h1>추천 상품</h1>\r\n          <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n            {products.map((product, index) => {\r\n              return <ProductCard key={index} product={product} />;\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductPage;\r\n","C:\\tk-market-web\\src\\upload\\index.js",["44","45","46"],"import {\r\n  Form,\r\n  Divider,\r\n  Input,\r\n  InputNumber,\r\n  Button,\r\n  Upload,\r\n  message,\r\n} from \"antd\";\r\nimport \"./index.css\";\r\nimport { ForkOutlined } from \"@ant-design/icons\";\r\nimport { useState } from \"react\";\r\nimport { API_URL } from \"../config/constants\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction UploadPage() {\r\n  const [imageUrl, setImageUrl] = useState(null);\r\n  const history = useHistory();\r\n\r\n  const onSubmit = (values) => {\r\n    axios\r\n      .post(`${API_URL}/products`, {\r\n        name: values.name,\r\n        description: values.description,\r\n        seller: values.seller,\r\n        price: parseInt(values.price),\r\n        imageUrl: imageUrl,\r\n      })\r\n      .then((result) => {\r\n        console.log(result);\r\n        history.replace(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        message.error(`에러가 발생했습니다. ${error.message}`);\r\n      });\r\n  };\r\n  const onChangeImage = (info) => {\r\n    if (info.file.status === \"uploading\") {\r\n      return;\r\n    }\r\n    if (info.file.status === \"done\") {\r\n      const response = info.file.response;\r\n      const imageUrl = response.imageUrl;\r\n      setImageUrl(imageUrl);\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"upload-container\">\r\n      <Form name=\"상품 업로드\" onFinish={onSubmit}>\r\n        <Form.Item\r\n          name=\"upload\"\r\n          label={<div className=\"upload-label\">상품 사진</div>}\r\n        >\r\n          <Upload\r\n            name=\"image\"\r\n            action={`${API_URL}/image`}\r\n            listType=\"picture\"\r\n            showUploadList={false}\r\n            onChange={onChangeImage}\r\n          >\r\n            {imageUrl ? (\r\n              <img id=\"upload-img\" src={`${API_URL}/${imageUrl}`} />\r\n            ) : (\r\n              <div id=\"upload-img-placeholder\">\r\n                <img src=\"/images/icons/camera.png\" />\r\n                <span>이미지를 업로드해주세요.</span>\r\n              </div>\r\n            )}\r\n          </Upload>\r\n        </Form.Item>\r\n        <Divider />\r\n        <Form.Item\r\n          label={<div className=\"upload-label\">판매자 명</div>}\r\n          name=\"seller\"\r\n          rules={[{ required: true, message: \"판매자 이름을 입력해주세요\" }]}\r\n        >\r\n          <Input\r\n            className=\"upload-name\"\r\n            size=\"large\"\r\n            placeholder=\"이름을 입력해주세요.\"\r\n          />\r\n        </Form.Item>\r\n        <Divider />\r\n        <Form.Item\r\n          name=\"name\"\r\n          label={<div className=\"upload-label\">상품 이름</div>}\r\n          rules={[{ required: true, message: \"상품 이름을 입력해주세요\" }]}\r\n        >\r\n          <Input\r\n            className=\"upload-name\"\r\n            size=\"large\"\r\n            placeholder=\"상품 이름을 입력해주세요\"\r\n          />\r\n        </Form.Item>\r\n        <Divider />\r\n        <Form.Item\r\n          name=\"price\"\r\n          label={<div className=\"upload-label\">상품 가격</div>}\r\n          rules={[{ required: true, message: \"상품 가격을 입력해주세요\" }]}\r\n        >\r\n          <InputNumber defaultValue={0} className=\"upload-price\" size=\"large\" />\r\n        </Form.Item>\r\n        <Divider />\r\n        <Form.Item\r\n          name=\"description\"\r\n          label={<div className=\"upload-label\">상품 소개</div>}\r\n          rules={[{ required: true, message: \"상품 소개를 입력해주세요.\" }]}\r\n        >\r\n          <Input.TextArea\r\n            size=\"large\"\r\n            id=\"product-description\"\r\n            showCount\r\n            maxLength={300}\r\n            placeholder=\"상품 소개를 적어주세요.\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button id=\"submit-button\" size=\"large\" htmlType=\"submit\">\r\n            상품 등록하기\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadPage;\r\n","C:\\tk-market-web\\src\\config\\constants.js",[],"C:\\tk-market-web\\src\\components\\productCard.js",["47","48"],"import { Link } from \"react-router-dom\";\r\nimport dayjs from \"dayjs\";\r\nimport \"dayjs/locale/ko\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\nimport { API_URL } from \"../config/constants\";\r\ndayjs.extend(relativeTime);\r\ndayjs.locale(\"ko\");\r\n\r\nfunction ProductCard(props) {\r\n  const product = props.product;\r\n\r\n  return (\r\n    <div className=\"product-card\">\r\n      {product.soldout === 1 && <div className=\"product-blur\" />}\r\n\r\n      <Link\r\n        style={{ color: \"inherit\" }}\r\n        className=\"product-link\"\r\n        to={`/products/${product.id}`}\r\n      >\r\n        <div>\r\n          <img className=\"product-img\" src={`${API_URL}/${product.imageUrl}`} />\r\n        </div>\r\n\r\n        <div className=\"product-contents\">\r\n          <span className=\"product-name\">{product.name}</span>\r\n\r\n          <span className=\"product-price\">{product.price}원</span>\r\n\r\n          <div className=\"product-footer\">\r\n            <div className=\"product-seller\">\r\n              <img className=\"product-avatar\" src=\"/images/icons/avatar.png\" />\r\n              <span>{product.seller}</span>\r\n            </div>\r\n            <span className=\"product-date\">\r\n              {dayjs(product.createdAt).fromNow()}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductCard;\r\n",{"ruleId":"49","severity":1,"message":"50","line":16,"column":13,"nodeType":"51","endLine":16,"endColumn":49},{"ruleId":"49","severity":1,"message":"50","line":54,"column":17,"nodeType":"51","endLine":54,"endColumn":62},{"ruleId":"52","severity":1,"message":"53","line":38,"column":6,"nodeType":"54","endLine":38,"endColumn":10,"suggestions":"55"},{"ruleId":"49","severity":1,"message":"50","line":63,"column":9,"nodeType":"51","endLine":63,"endColumn":55},{"ruleId":"49","severity":1,"message":"50","line":66,"column":9,"nodeType":"51","endLine":66,"endColumn":47},{"ruleId":"56","severity":1,"message":"57","line":11,"column":10,"nodeType":"58","messageId":"59","endLine":11,"endColumn":22},{"ruleId":"49","severity":1,"message":"50","line":64,"column":15,"nodeType":"51","endLine":64,"endColumn":69},{"ruleId":"49","severity":1,"message":"50","line":67,"column":17,"nodeType":"51","endLine":67,"endColumn":55},{"ruleId":"49","severity":1,"message":"50","line":22,"column":11,"nodeType":"51","endLine":22,"endColumn":81},{"ruleId":"49","severity":1,"message":"50","line":32,"column":15,"nodeType":"51","endLine":32,"endColumn":80},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getProduct' and 'getRecommendations'. Either include them or remove the dependency array.","ArrayExpression",["60"],"no-unused-vars","'ForkOutlined' is defined but never used.","Identifier","unusedVar",{"desc":"61","fix":"62"},"Update the dependencies array to be: [getProduct, getRecommendations, id]",{"range":"63","text":"64"},[1091,1095],"[getProduct, getRecommendations, id]"]